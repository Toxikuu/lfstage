# envs/build.env
# Defines some utilities for building packages

SOURCES="${SOURCES:-${LFS:?}/sources}"

extract() {
  local package="${1:?}"
  rm -rf /tmp/extract
  mkdir -v /tmp/extract

  tar xf "$package"-*.tar.*z -C /tmp/extract
  rm -rf "$package"
  mv -f /tmp/extract/* "$package"
  # NOTE: cp changes mod time by default, breaking some projects using automake
  # mv is used to avoid that hurdle
}

pre() {
    local package="${1:?}"
    cd "${SOURCES:?}"

    echo "Building $package" >&2
    extract "$package"
    cd "$package"
}

post() {
    local package="${1:?}"

    echo "Cleaning up..."
    cd "${SOURCES:?}"
    rm -rf "$package"
    echo "Built $package" >&2
}

# Function to build packages
# It guesses the tarball for a package and extracts it
# 
# Example usage:
# build popt << EOF
# ./configure --prefix=/usr --disable-static
# make
# make DESTDIR="$PWD/D" install # $PWD will expand before entering the src dir
# EOF
# build() {
#     export -f build
#     local pkg="$1"
#     shift
#
#     local dir=$(tar tf "$pkg"*[0-9]*".tar."* | head -n1 | cut -d/ -f1)
#     [ -z "$dir" ] && die "Failed to find top level directory"
#     tar xf "$pkg"*[0-9]*".tar."* || die "Failed to extract $pkg"
#
#     (
#         cd   "$dir"  || die "Failed to enter $dir"
#         msg "Building $dir" >&2
#         bash -e "$@" || die "Failed to build $dir"
#     )
#
#     rm -rf "$dir"
# }
